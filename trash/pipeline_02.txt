pipeline {
    agent any
    environment {
        BACKEND_DIR = 'backend'
        FRONTEND_DIR = 'frontend'
        NGINX_DIR = 'nginx'
    }
    stages {
        stage('Tool Setup') {
            steps {
                echo "Setting up tools..."
            }
        }

        stage('Git Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Sachintha-Fdo/testing_NCC',
                        credentialsId: '1ae7a64e-218b-4512-b3e4-aec12c5bd32b' 
                    ]]
                ])
            }
        }

        stage('Debug Workspace') {
            steps {
                bat 'dir /S /B > workspace-files.txt'
                bat 'type workspace-files.txt'
            }
        }

        stage('Setup Directories') {
            steps {
                bat """
                if not exist "${BACKEND_DIR}" mkdir "${BACKEND_DIR}"
                if not exist "${FRONTEND_DIR}" mkdir "${FRONTEND_DIR}"
                if not exist "${NGINX_DIR}" mkdir "${NGINX_DIR}"
                """
            }
        }

        stage('Prepare Backend') {
            steps {
                dir(BACKEND_DIR) {
                    script {
                        bat """
                        move ../backend/.dockerignore .
                        move ../backend/.env .
                        move ../backend/app.js .
                        move ../backend/Dockerfile .
                        move ../backend/package-lock.json .
                        move ../backend/package.json .
                        move ../backend/server.js .
                        """
                    }
                }
            }
        }

        stage('Prepare Frontend') {
            steps {
                dir(FRONTEND_DIR) {
                    script {
                        bat """
                        move ../frontend/.dockerignore .
                        move ../frontend/index.html .
                        move ../frontend/Dockerfile .
                        move ../frontend/package.json .
                        move ../frontend/package-lock.json .
                        move ../frontend/vite.config.js .
                        """
                    }
                }
            }
        }

        stage('Prepare Nginx') {
            steps {
                dir(NGINX_DIR) {
                    script {
                        bat """
                        move ../nginx/Dockerfile .
                        move ../nginx/default.conf .
                        """
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir(FRONTEND_DIR) {
                    script {
                        bat """
                        npm install
                        npm run build
                        """
                    }
                }
            }
        }

        stage('Docker Build and Deploy (Compose)') {
            steps {
                script {
                    bat """
                    docker-compose -f docker-compose.yml up --build -d
                    """
                }
            }
        }

        stage('Docker Build and Deploy (Direct)') {
            steps {
                script {
                    // Build Backend Image
                    dir(BACKEND_DIR) {
                        bat 'docker build -t backend-image .'
                    }

                    // Build Frontend Image
                    dir(FRONTEND_DIR) {
                        bat 'docker build -t frontend-image .'
                    }

                    // Build Nginx Image
                    dir(NGINX_DIR) {
                        bat 'docker build -t nginx-image .'
                    }

                    // Run Containers
                    bat """
                    docker run -d --name backend-container backend-image
                    docker run -d --name frontend-container frontend-image
                    docker run -d --name nginx-container -p 80:80 nginx-image
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
